name: CD

on:
  push:
    branches: 
      - "dev/frama"

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Create env file
        run: |
          echo "NEXT_PUBLIC_API_BASE_URL='${{ secrets.NEXT_PUBLIC_API_BASE_URL }}'" > .env
          echo "NEXT_PUBLIC_APP_NAME='${{ secrets.NEXT_PUBLIC_APP_NAME }}'" >> .env
        shell: bash

      - name: Run Yarn Install
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Build Production Bundle
        uses: borales/actions-yarn@v4
        with:
          cmd: build
              
      - name: Compress Build
        run: |
          mkdir build
          tar -zcf build/build.tar.gz --exclude=./build .
          
      - name: rsync Deployments
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr
          path: build/build.tar.gz
          remote_path: ${{ secrets.DIR }}/src
          remote_host: ${{ secrets.HOST }}
          remote_user: ${{ secrets.USERNAME }}
          remote_key: ${{ secrets.PRIVATE_KEY }}
          remote_port: ${{ secrets.PORT }}

      - name: Deploy app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          timeout: 30s
          command_timeout: 10m
          proxy_timeout: 30s
          script_stop: true
          script: |
            cd ${{ secrets.DIR }} 
            current_timestamp=$(date +%Y-%m-%d_%H-%M-%S)
            previous_timestamp=$(ls -d * | grep -Eo '[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}-[0-9]{2}-[0-9]{2}' | sort | tail -n 1)
            
            if [ -e "build.tar.gz" ]; then
              tar -xvf build.tar.gz 
              rm build.tar.gz 
            else
              echo "File 'build.tar.gz' does not exist, nothing to extract."
              exit 1
            fi
            
            cp -R ${{ secrets.DIR }}/src $current_timestamp
            
            if [ -h "build" ]; then
              unlink build 
              echo "Symlink 'build' found and unlinked."
            else
              ln -s $current_timestamp build
              echo "Symlink build"
            fi
